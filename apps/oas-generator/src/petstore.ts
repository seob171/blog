/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.19
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  LoginUserParams,
  UpdatePetWithFormParams,
  UploadFileParams,
} from "./model";
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { ApiResponse, GetInventory200, Order, Pet, User } from "./model";

/**
 * Update an existing pet by Id
 * @summary Update an existing pet
 */
export type updatePetResponse = {
  data: Pet;
  status: number;
};

export const getUpdatePetUrl = () => {
  return `https://petstore3.swagger.io/api/v3/pet`;
};

export const updatePet = async (
  pet: Pet,
  options?: RequestInit,
): Promise<updatePetResponse> => {
  const res = await fetch(getUpdatePetUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(pet),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getUpdatePetMutationOptions = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePet>>,
    TError,
    { data: Pet },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePet>>,
  TError,
  { data: Pet },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePet>>,
    { data: Pet }
  > = (props) => {
    const { data } = props ?? {};

    return updatePet(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePetMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePet>>
>;
export type UpdatePetMutationBody = Pet;
export type UpdatePetMutationError = Promise<void>;

/**
 * @summary Update an existing pet
 */
export const useUpdatePet = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePet>>,
    TError,
    { data: Pet },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof updatePet>>,
  TError,
  { data: Pet },
  TContext
> => {
  const mutationOptions = getUpdatePetMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Add a new pet to the store
 * @summary Add a new pet to the store
 */
export type addPetResponse = {
  data: Pet;
  status: number;
};

export const getAddPetUrl = () => {
  return `https://petstore3.swagger.io/api/v3/pet`;
};

export const addPet = async (
  pet: Pet,
  options?: RequestInit,
): Promise<addPetResponse> => {
  const res = await fetch(getAddPetUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(pet),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getAddPetMutationOptions = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addPet>>,
    TError,
    { data: Pet },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addPet>>,
  TError,
  { data: Pet },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addPet>>,
    { data: Pet }
  > = (props) => {
    const { data } = props ?? {};

    return addPet(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddPetMutationResult = NonNullable<
  Awaited<ReturnType<typeof addPet>>
>;
export type AddPetMutationBody = Pet;
export type AddPetMutationError = Promise<void>;

/**
 * @summary Add a new pet to the store
 */
export const useAddPet = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addPet>>,
    TError,
    { data: Pet },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof addPet>>,
  TError,
  { data: Pet },
  TContext
> => {
  const mutationOptions = getAddPetMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export type findPetsByStatusResponse = {
  data: Pet[];
  status: number;
};

export const getFindPetsByStatusUrl = (params?: FindPetsByStatusParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, "null");
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return normalizedParams.size
    ? `https://petstore3.swagger.io/api/v3/pet/findByStatus?${normalizedParams.toString()}`
    : `https://petstore3.swagger.io/api/v3/pet/findByStatus`;
};

export const findPetsByStatus = async (
  params?: FindPetsByStatusParams,
  options?: RequestInit,
): Promise<findPetsByStatusResponse> => {
  const res = await fetch(getFindPetsByStatusUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getFindPetsByStatusQueryKey = (
  params?: FindPetsByStatusParams,
) => {
  return [
    `https://petstore3.swagger.io/api/v3/pet/findByStatus`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFindPetsByStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof findPetsByStatus>>,
  TError = Promise<void>,
>(
  params?: FindPetsByStatusParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof findPetsByStatus>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFindPetsByStatusQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findPetsByStatus>>
  > = ({ signal }) => findPetsByStatus(params, { signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findPetsByStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FindPetsByStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof findPetsByStatus>>
>;
export type FindPetsByStatusQueryError = Promise<void>;

/**
 * @summary Finds Pets by status
 */

export function useFindPetsByStatus<
  TData = Awaited<ReturnType<typeof findPetsByStatus>>,
  TError = Promise<void>,
>(
  params?: FindPetsByStatusParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof findPetsByStatus>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFindPetsByStatusQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags
 */
export type findPetsByTagsResponse = {
  data: Pet[];
  status: number;
};

export const getFindPetsByTagsUrl = (params?: FindPetsByTagsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, "null");
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return normalizedParams.size
    ? `https://petstore3.swagger.io/api/v3/pet/findByTags?${normalizedParams.toString()}`
    : `https://petstore3.swagger.io/api/v3/pet/findByTags`;
};

export const findPetsByTags = async (
  params?: FindPetsByTagsParams,
  options?: RequestInit,
): Promise<findPetsByTagsResponse> => {
  const res = await fetch(getFindPetsByTagsUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getFindPetsByTagsQueryKey = (params?: FindPetsByTagsParams) => {
  return [
    `https://petstore3.swagger.io/api/v3/pet/findByTags`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFindPetsByTagsQueryOptions = <
  TData = Awaited<ReturnType<typeof findPetsByTags>>,
  TError = Promise<void>,
>(
  params?: FindPetsByTagsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof findPetsByTags>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFindPetsByTagsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findPetsByTags>>> = ({
    signal,
  }) => findPetsByTags(params, { signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findPetsByTags>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FindPetsByTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findPetsByTags>>
>;
export type FindPetsByTagsQueryError = Promise<void>;

/**
 * @summary Finds Pets by tags
 */

export function useFindPetsByTags<
  TData = Awaited<ReturnType<typeof findPetsByTags>>,
  TError = Promise<void>,
>(
  params?: FindPetsByTagsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof findPetsByTags>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFindPetsByTagsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export type getPetByIdResponse = {
  data: Pet;
  status: number;
};

export const getGetPetByIdUrl = (petId: number) => {
  return `https://petstore3.swagger.io/api/v3/pet/${petId}`;
};

export const getPetById = async (
  petId: number,
  options?: RequestInit,
): Promise<getPetByIdResponse> => {
  const res = await fetch(getGetPetByIdUrl(petId), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetPetByIdQueryKey = (petId: number) => {
  return [`https://petstore3.swagger.io/api/v3/pet/${petId}`] as const;
};

export const getGetPetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPetById>>,
  TError = Promise<void>,
>(
  petId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPetById>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPetByIdQueryKey(petId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPetById>>> = ({
    signal,
  }) => getPetById(petId, { signal, ...fetchOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!petId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPetById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPetById>>
>;
export type GetPetByIdQueryError = Promise<void>;

/**
 * @summary Find pet by ID
 */

export function useGetPetById<
  TData = Awaited<ReturnType<typeof getPetById>>,
  TError = Promise<void>,
>(
  petId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPetById>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPetByIdQueryOptions(petId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Updates a pet in the store with form data
 */
export type updatePetWithFormResponse = {
  data: unknown;
  status: number;
};

export const getUpdatePetWithFormUrl = (
  petId: number,
  params?: UpdatePetWithFormParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, "null");
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return normalizedParams.size
    ? `https://petstore3.swagger.io/api/v3/pet/${petId}?${normalizedParams.toString()}`
    : `https://petstore3.swagger.io/api/v3/pet/${petId}`;
};

export const updatePetWithForm = async (
  petId: number,
  params?: UpdatePetWithFormParams,
  options?: RequestInit,
): Promise<updatePetWithFormResponse> => {
  const res = await fetch(getUpdatePetWithFormUrl(petId, params), {
    ...options,
    method: "POST",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getUpdatePetWithFormMutationOptions = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePetWithForm>>,
    TError,
    { petId: number; params?: UpdatePetWithFormParams },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePetWithForm>>,
  TError,
  { petId: number; params?: UpdatePetWithFormParams },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePetWithForm>>,
    { petId: number; params?: UpdatePetWithFormParams }
  > = (props) => {
    const { petId, params } = props ?? {};

    return updatePetWithForm(petId, params, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePetWithFormMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePetWithForm>>
>;

export type UpdatePetWithFormMutationError = Promise<void>;

/**
 * @summary Updates a pet in the store with form data
 */
export const useUpdatePetWithForm = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePetWithForm>>,
    TError,
    { petId: number; params?: UpdatePetWithFormParams },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof updatePetWithForm>>,
  TError,
  { petId: number; params?: UpdatePetWithFormParams },
  TContext
> => {
  const mutationOptions = getUpdatePetWithFormMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Deletes a pet
 */
export type deletePetResponse = {
  data: unknown;
  status: number;
};

export const getDeletePetUrl = (petId: number) => {
  return `https://petstore3.swagger.io/api/v3/pet/${petId}`;
};

export const deletePet = async (
  petId: number,
  options?: RequestInit,
): Promise<deletePetResponse> => {
  const res = await fetch(getDeletePetUrl(petId), {
    ...options,
    method: "DELETE",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getDeletePetMutationOptions = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePet>>,
    TError,
    { petId: number },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePet>>,
  TError,
  { petId: number },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePet>>,
    { petId: number }
  > = (props) => {
    const { petId } = props ?? {};

    return deletePet(petId, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePetMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePet>>
>;

export type DeletePetMutationError = Promise<void>;

/**
 * @summary Deletes a pet
 */
export const useDeletePet = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePet>>,
    TError,
    { petId: number },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof deletePet>>,
  TError,
  { petId: number },
  TContext
> => {
  const mutationOptions = getDeletePetMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary uploads an image
 */
export type uploadFileResponse = {
  data: ApiResponse;
  status: number;
};

export const getUploadFileUrl = (petId: number, params?: UploadFileParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, "null");
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return normalizedParams.size
    ? `https://petstore3.swagger.io/api/v3/pet/${petId}/uploadImage?${normalizedParams.toString()}`
    : `https://petstore3.swagger.io/api/v3/pet/${petId}/uploadImage`;
};

export const uploadFile = async (
  petId: number,
  uploadFileBody: Blob,
  params?: UploadFileParams,
  options?: RequestInit,
): Promise<uploadFileResponse> => {
  const res = await fetch(getUploadFileUrl(petId, params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/octet-stream" },
    body: JSON.stringify(uploadFileBody),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getUploadFileMutationOptions = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadFile>>,
    TError,
    { petId: number; data: Blob; params?: UploadFileParams },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadFile>>,
  TError,
  { petId: number; data: Blob; params?: UploadFileParams },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadFile>>,
    { petId: number; data: Blob; params?: UploadFileParams }
  > = (props) => {
    const { petId, data, params } = props ?? {};

    return uploadFile(petId, data, params, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadFile>>
>;
export type UploadFileMutationBody = Blob;
export type UploadFileMutationError = Promise<unknown>;

/**
 * @summary uploads an image
 */
export const useUploadFile = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadFile>>,
    TError,
    { petId: number; data: Blob; params?: UploadFileParams },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof uploadFile>>,
  TError,
  { petId: number; data: Blob; params?: UploadFileParams },
  TContext
> => {
  const mutationOptions = getUploadFileMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export type getInventoryResponse = {
  data: GetInventory200;
  status: number;
};

export const getGetInventoryUrl = () => {
  return `https://petstore3.swagger.io/api/v3/store/inventory`;
};

export const getInventory = async (
  options?: RequestInit,
): Promise<getInventoryResponse> => {
  const res = await fetch(getGetInventoryUrl(), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetInventoryQueryKey = () => {
  return [`https://petstore3.swagger.io/api/v3/store/inventory`] as const;
};

export const getGetInventoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getInventory>>,
  TError = Promise<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getInventory>>,
    TError,
    TData
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInventoryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventory>>> = ({
    signal,
  }) => getInventory({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInventory>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetInventoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInventory>>
>;
export type GetInventoryQueryError = Promise<unknown>;

/**
 * @summary Returns pet inventories by status
 */

export function useGetInventory<
  TData = Awaited<ReturnType<typeof getInventory>>,
  TError = Promise<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getInventory>>,
    TError,
    TData
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetInventoryQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Place a new order in the store
 * @summary Place an order for a pet
 */
export type placeOrderResponse = {
  data: Order;
  status: number;
};

export const getPlaceOrderUrl = () => {
  return `https://petstore3.swagger.io/api/v3/store/order`;
};

export const placeOrder = async (
  order: Order,
  options?: RequestInit,
): Promise<placeOrderResponse> => {
  const res = await fetch(getPlaceOrderUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(order),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getPlaceOrderMutationOptions = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof placeOrder>>,
    TError,
    { data: Order },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof placeOrder>>,
  TError,
  { data: Order },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof placeOrder>>,
    { data: Order }
  > = (props) => {
    const { data } = props ?? {};

    return placeOrder(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PlaceOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof placeOrder>>
>;
export type PlaceOrderMutationBody = Order;
export type PlaceOrderMutationError = Promise<void>;

/**
 * @summary Place an order for a pet
 */
export const usePlaceOrder = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof placeOrder>>,
    TError,
    { data: Order },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof placeOrder>>,
  TError,
  { data: Order },
  TContext
> => {
  const mutationOptions = getPlaceOrderMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @summary Find purchase order by ID
 */
export type getOrderByIdResponse = {
  data: Order;
  status: number;
};

export const getGetOrderByIdUrl = (orderId: number) => {
  return `https://petstore3.swagger.io/api/v3/store/order/${orderId}`;
};

export const getOrderById = async (
  orderId: number,
  options?: RequestInit,
): Promise<getOrderByIdResponse> => {
  const res = await fetch(getGetOrderByIdUrl(orderId), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetOrderByIdQueryKey = (orderId: number) => {
  return [
    `https://petstore3.swagger.io/api/v3/store/order/${orderId}`,
  ] as const;
};

export const getGetOrderByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrderById>>,
  TError = Promise<void>,
>(
  orderId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOrderById>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrderByIdQueryKey(orderId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({
    signal,
  }) => getOrderById(orderId, { signal, ...fetchOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!orderId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOrderById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetOrderByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrderById>>
>;
export type GetOrderByIdQueryError = Promise<void>;

/**
 * @summary Find purchase order by ID
 */

export function useGetOrderById<
  TData = Awaited<ReturnType<typeof getOrderById>>,
  TError = Promise<void>,
>(
  orderId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOrderById>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetOrderByIdQueryOptions(orderId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @summary Delete purchase order by ID
 */
export type deleteOrderResponse = {
  data: unknown;
  status: number;
};

export const getDeleteOrderUrl = (orderId: number) => {
  return `https://petstore3.swagger.io/api/v3/store/order/${orderId}`;
};

export const deleteOrder = async (
  orderId: number,
  options?: RequestInit,
): Promise<deleteOrderResponse> => {
  const res = await fetch(getDeleteOrderUrl(orderId), {
    ...options,
    method: "DELETE",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getDeleteOrderMutationOptions = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrder>>,
    TError,
    { orderId: number },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOrder>>,
  TError,
  { orderId: number },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOrder>>,
    { orderId: number }
  > = (props) => {
    const { orderId } = props ?? {};

    return deleteOrder(orderId, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOrder>>
>;

export type DeleteOrderMutationError = Promise<void>;

/**
 * @summary Delete purchase order by ID
 */
export const useDeleteOrder = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrder>>,
    TError,
    { orderId: number },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteOrder>>,
  TError,
  { orderId: number },
  TContext
> => {
  const mutationOptions = getDeleteOrderMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export type createUserResponse = {
  data: User;
  status: number;
};

export const getCreateUserUrl = () => {
  return `https://petstore3.swagger.io/api/v3/user`;
};

export const createUser = async (
  user: User,
  options?: RequestInit,
): Promise<createUserResponse> => {
  const res = await fetch(getCreateUserUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(user),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getCreateUserMutationOptions = <
  TError = Promise<User>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: User },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: User },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUser>>,
    { data: User }
  > = (props) => {
    const { data } = props ?? {};

    return createUser(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUser>>
>;
export type CreateUserMutationBody = User;
export type CreateUserMutationError = Promise<User>;

/**
 * @summary Create user
 */
export const useCreateUser = <
  TError = Promise<User>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: User },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: User },
  TContext
> => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Creates list of users with given input array
 * @summary Creates list of users with given input array
 */
export type createUsersWithListInputResponse = {
  data: User;
  status: number;
};

export const getCreateUsersWithListInputUrl = () => {
  return `https://petstore3.swagger.io/api/v3/user/createWithList`;
};

export const createUsersWithListInput = async (
  user: User[],
  options?: RequestInit,
): Promise<createUsersWithListInputResponse> => {
  const res = await fetch(getCreateUsersWithListInputUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(user),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getCreateUsersWithListInputMutationOptions = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUsersWithListInput>>,
    TError,
    { data: User[] },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUsersWithListInput>>,
  TError,
  { data: User[] },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUsersWithListInput>>,
    { data: User[] }
  > = (props) => {
    const { data } = props ?? {};

    return createUsersWithListInput(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUsersWithListInputMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUsersWithListInput>>
>;
export type CreateUsersWithListInputMutationBody = User[];
export type CreateUsersWithListInputMutationError = Promise<void>;

/**
 * @summary Creates list of users with given input array
 */
export const useCreateUsersWithListInput = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUsersWithListInput>>,
    TError,
    { data: User[] },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof createUsersWithListInput>>,
  TError,
  { data: User[] },
  TContext
> => {
  const mutationOptions = getCreateUsersWithListInputMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Logs user into the system
 */
export type loginUserResponse = {
  data: string;
  status: number;
};

export const getLoginUserUrl = (params?: LoginUserParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, "null");
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return normalizedParams.size
    ? `https://petstore3.swagger.io/api/v3/user/login?${normalizedParams.toString()}`
    : `https://petstore3.swagger.io/api/v3/user/login`;
};

export const loginUser = async (
  params?: LoginUserParams,
  options?: RequestInit,
): Promise<loginUserResponse> => {
  const res = await fetch(getLoginUserUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getLoginUserQueryKey = (params?: LoginUserParams) => {
  return [
    `https://petstore3.swagger.io/api/v3/user/login`,
    ...(params ? [params] : []),
  ] as const;
};

export const getLoginUserQueryOptions = <
  TData = Awaited<ReturnType<typeof loginUser>>,
  TError = Promise<void>,
>(
  params?: LoginUserParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof loginUser>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getLoginUserQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof loginUser>>> = ({
    signal,
  }) => loginUser(params, { signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof loginUser>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type LoginUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof loginUser>>
>;
export type LoginUserQueryError = Promise<void>;

/**
 * @summary Logs user into the system
 */

export function useLoginUser<
  TData = Awaited<ReturnType<typeof loginUser>>,
  TError = Promise<void>,
>(
  params?: LoginUserParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof loginUser>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getLoginUserQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Logs out current logged in user session
 */
export type logoutUserResponse = {
  data: void;
  status: number;
};

export const getLogoutUserUrl = () => {
  return `https://petstore3.swagger.io/api/v3/user/logout`;
};

export const logoutUser = async (
  options?: RequestInit,
): Promise<logoutUserResponse> => {
  const res = await fetch(getLogoutUserUrl(), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getLogoutUserQueryKey = () => {
  return [`https://petstore3.swagger.io/api/v3/user/logout`] as const;
};

export const getLogoutUserQueryOptions = <
  TData = Awaited<ReturnType<typeof logoutUser>>,
  TError = Promise<void>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof logoutUser>>,
    TError,
    TData
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getLogoutUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof logoutUser>>> = ({
    signal,
  }) => logoutUser({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof logoutUser>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type LogoutUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof logoutUser>>
>;
export type LogoutUserQueryError = Promise<void>;

/**
 * @summary Logs out current logged in user session
 */

export function useLogoutUser<
  TData = Awaited<ReturnType<typeof logoutUser>>,
  TError = Promise<void>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof logoutUser>>,
    TError,
    TData
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getLogoutUserQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user by user name
 */
export type getUserByNameResponse = {
  data: User;
  status: number;
};

export const getGetUserByNameUrl = (username: string) => {
  return `https://petstore3.swagger.io/api/v3/user/${username}`;
};

export const getUserByName = async (
  username: string,
  options?: RequestInit,
): Promise<getUserByNameResponse> => {
  const res = await fetch(getGetUserByNameUrl(username), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetUserByNameQueryKey = (username: string) => {
  return [`https://petstore3.swagger.io/api/v3/user/${username}`] as const;
};

export const getGetUserByNameQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserByName>>,
  TError = Promise<void>,
>(
  username: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserByName>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserByNameQueryKey(username);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByName>>> = ({
    signal,
  }) => getUserByName(username, { signal, ...fetchOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserByName>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserByNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserByName>>
>;
export type GetUserByNameQueryError = Promise<void>;

/**
 * @summary Get user by user name
 */

export function useGetUserByName<
  TData = Awaited<ReturnType<typeof getUserByName>>,
  TError = Promise<void>,
>(
  username: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserByName>>,
      TError,
      TData
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserByNameQueryOptions(username, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * This can only be done by the logged in user.
 * @summary Update user
 */
export type updateUserResponse = {
  data: void;
  status: number;
};

export const getUpdateUserUrl = (username: string) => {
  return `https://petstore3.swagger.io/api/v3/user/${username}`;
};

export const updateUser = async (
  username: string,
  user: User,
  options?: RequestInit,
): Promise<updateUserResponse> => {
  const res = await fetch(getUpdateUserUrl(username), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(user),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getUpdateUserMutationOptions = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { username: string; data: User },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUser>>,
  TError,
  { username: string; data: User },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUser>>,
    { username: string; data: User }
  > = (props) => {
    const { username, data } = props ?? {};

    return updateUser(username, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUser>>
>;
export type UpdateUserMutationBody = User;
export type UpdateUserMutationError = Promise<void>;

/**
 * @summary Update user
 */
export const useUpdateUser = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { username: string; data: User },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateUser>>,
  TError,
  { username: string; data: User },
  TContext
> => {
  const mutationOptions = getUpdateUserMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export type deleteUserResponse = {
  data: unknown;
  status: number;
};

export const getDeleteUserUrl = (username: string) => {
  return `https://petstore3.swagger.io/api/v3/user/${username}`;
};

export const deleteUser = async (
  username: string,
  options?: RequestInit,
): Promise<deleteUserResponse> => {
  const res = await fetch(getDeleteUserUrl(username), {
    ...options,
    method: "DELETE",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getDeleteUserMutationOptions = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { username: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { username: string },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUser>>,
    { username: string }
  > = (props) => {
    const { username } = props ?? {};

    return deleteUser(username, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUser>>
>;

export type DeleteUserMutationError = Promise<void>;

/**
 * @summary Delete user
 */
export const useDeleteUser = <
  TError = Promise<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { username: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { username: string },
  TContext
> => {
  const mutationOptions = getDeleteUserMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getUpdatePetResponseMock = (
  overrideResponse: Partial<Pet> = {},
): Pet => ({
  category: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    },
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.word.sample(),
  photoUrls: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.word.sample()),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["available", "pending", "sold"] as const),
    undefined,
  ]),
  tags: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getAddPetResponseMock = (
  overrideResponse: Partial<Pet> = {},
): Pet => ({
  category: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    },
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.word.sample(),
  photoUrls: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.word.sample()),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["available", "pending", "sold"] as const),
    undefined,
  ]),
  tags: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getFindPetsByStatusResponseMock = (): Pet[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    category: faker.helpers.arrayElement([
      {
        id: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      },
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.word.sample(),
    photoUrls: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["available", "pending", "sold"] as const),
      undefined,
    ]),
    tags: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      })),
      undefined,
    ]),
  }));

export const getFindPetsByTagsResponseMock = (): Pet[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    category: faker.helpers.arrayElement([
      {
        id: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      },
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.word.sample(),
    photoUrls: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["available", "pending", "sold"] as const),
      undefined,
    ]),
    tags: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      })),
      undefined,
    ]),
  }));

export const getGetPetByIdResponseMock = (
  overrideResponse: Partial<Pet> = {},
): Pet => ({
  category: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    },
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.word.sample(),
  photoUrls: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.word.sample()),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["available", "pending", "sold"] as const),
    undefined,
  ]),
  tags: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUploadFileResponseMock = (
  overrideResponse: Partial<ApiResponse> = {},
): ApiResponse => ({
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetInventoryResponseMock = (): GetInventory200 => ({
  [faker.string.alphanumeric(5)]: faker.number.int({
    min: undefined,
    max: undefined,
  }),
});

export const getPlaceOrderResponseMock = (
  overrideResponse: Partial<Order> = {},
): Order => ({
  complete: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  petId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  quantity: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  shipDate: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["placed", "approved", "delivered"] as const),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetOrderByIdResponseMock = (
  overrideResponse: Partial<Order> = {},
): Order => ({
  complete: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  petId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  quantity: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  shipDate: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["placed", "approved", "delivered"] as const),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateUsersWithListInputResponseMock = (
  overrideResponse: Partial<User> = {},
): User => ({
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  password: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  phone: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  username: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  userStatus: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getLoginUserResponseMock = (): string => faker.word.sample();

export const getGetUserByNameResponseMock = (
  overrideResponse: Partial<User> = {},
): User => ({
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  password: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  phone: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  username: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  userStatus: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdatePetMockHandler = (
  overrideResponse?:
    | Pet
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<Pet> | Pet),
) => {
  return http.put("*/pet", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdatePetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAddPetMockHandler = (
  overrideResponse?:
    | Pet
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Pet> | Pet),
) => {
  return http.post("*/pet", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAddPetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getFindPetsByStatusMockHandler = (
  overrideResponse?:
    | Pet[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pet[]> | Pet[]),
) => {
  return http.get("*/pet/findByStatus", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getFindPetsByStatusResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getFindPetsByTagsMockHandler = (
  overrideResponse?:
    | Pet[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pet[]> | Pet[]),
) => {
  return http.get("*/pet/findByTags", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getFindPetsByTagsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetPetByIdMockHandler = (
  overrideResponse?:
    | Pet
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pet> | Pet),
) => {
  return http.get("*/pet/:petId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPetByIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdatePetWithFormMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/pet/:petId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeletePetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.delete("*/pet/:petId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getUploadFileMockHandler = (
  overrideResponse?:
    | ApiResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ApiResponse> | ApiResponse),
) => {
  return http.post("*/pet/:petId/uploadImage", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUploadFileResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetInventoryMockHandler = (
  overrideResponse?:
    | GetInventory200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetInventory200> | GetInventory200),
) => {
  return http.get("*/store/inventory", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetInventoryResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPlaceOrderMockHandler = (
  overrideResponse?:
    | Order
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Order> | Order),
) => {
  return http.post("*/store/order", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPlaceOrderResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetOrderByIdMockHandler = (
  overrideResponse?:
    | Order
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Order> | Order),
) => {
  return http.get("*/store/order/:orderId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetOrderByIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteOrderMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.delete("*/store/order/:orderId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getCreateUserMockHandler = (
  overrideResponse?:
    | User
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<User> | User),
) => {
  return http.post("*/user", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getCreateUsersWithListInputMockHandler = (
  overrideResponse?:
    | User
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<User> | User),
) => {
  return http.post("*/user/createWithList", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateUsersWithListInputResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getLoginUserMockHandler = (
  overrideResponse?:
    | string
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string> | string),
) => {
  return http.get("*/user/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getLoginUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getLogoutUserMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/user/logout", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetUserByNameMockHandler = (
  overrideResponse?:
    | User
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<User> | User),
) => {
  return http.get("*/user/:username", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserByNameResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateUserMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.put("*/user/:username", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteUserMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.delete("*/user/:username", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getSwaggerPetstoreOpenAPI30Mock = () => [
  getUpdatePetMockHandler(),
  getAddPetMockHandler(),
  getFindPetsByStatusMockHandler(),
  getFindPetsByTagsMockHandler(),
  getGetPetByIdMockHandler(),
  getUpdatePetWithFormMockHandler(),
  getDeletePetMockHandler(),
  getUploadFileMockHandler(),
  getGetInventoryMockHandler(),
  getPlaceOrderMockHandler(),
  getGetOrderByIdMockHandler(),
  getDeleteOrderMockHandler(),
  getCreateUserMockHandler(),
  getCreateUsersWithListInputMockHandler(),
  getLoginUserMockHandler(),
  getLogoutUserMockHandler(),
  getGetUserByNameMockHandler(),
  getUpdateUserMockHandler(),
  getDeleteUserMockHandler(),
];
